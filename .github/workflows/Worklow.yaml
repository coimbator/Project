name: GitHub Actions Workflow
run-name: ${{ github.actor }} workflow with shared Azure login
on:
  push:
    branches:
      - main

jobs:
  data-ingestion:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az extension add --name ml -y

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Create AzureML Data Asset
      env:
        DATA_FILE: "data/HAR.csv"  # Path to your dataset in the repository
        DATA_ASSET_NAME: "HAR-dataset"  # Desired name of your data asset
      run: |
        az ml data create \
          --name $DATA_ASSET_NAME \
          --path $DATA_FILE \
          --type uri_file \
          --workspace-name Project-WS \
          --resource-group Project-G \
          --description "Dataset for preprocessing" \

    - name: Get Data Asset URI
      id: get-data-uri
      run: |
        DATA_ASSET_URI=$(az ml data show --name "HAR-dataset" --version 1 --workspace-name Project-WS --resource-group Project-G --query "uri")
        echo "DATA_ASSET_URI=$DATA_ASSET_URI" >> $GITHUB_ENV

    - name: Debug URI
      run: echo "Data Asset URI - ${{ env.DATA_ASSET_URI }}"
  
  data-preprocessing:
    needs: data-ingestion
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        pip install azureml-core pandas scikit-learn

    - name: Run Data Preprocessing
      env:
        DATA_ASSET_URI: ${{ env.DATA_ASSET_URI }}
      run: |
        python data_preprocessing.py
  model-training:
    needs: data-preprocessing
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        pip install azureml-sdk scikit-learn mlflow

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Train Model
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        az extension add --name ml -y

        az ml data create \
          --name standardized_train_features \
          --path data/standardized_train_features.csv \
          --type uri_file \
          --workspace-name Project-WS \
          --resource-group Project-G \
          --description "Dataset for Training" \

        az ml data create \
          --name standardized_test_features \
          --path data/standardized_test_features.csv \
          --type uri_file \
          --workspace-name Project-WS \
          --resource-group Project-G \
          --description "Dataset for Testing" \

        az ml data create \
          --name test_target \
          --path data/test_target.csv \
          --type uri_file \
          --workspace-name Project-WS \
          --resource-group Project-G \
          --description "Dataset for Testing" \

        az ml data create \
          --name train_target \
          --path data/train_target.csv \
          --type uri_file \
          --workspace-name Project-WS \
          --resource-group Project-G \
          --description "Dataset for Training" \
        
        # Submit the training job
        az ml job create --file job.yml --web --resource-group Project-G --workspace-name Project-WS

  Integration-testing:
    needs: model-training
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        pip install pandas scikit-learn azureml-core pickle unittest

    - name: Run Integration Tests
      run: |
        python integrate_test.py
